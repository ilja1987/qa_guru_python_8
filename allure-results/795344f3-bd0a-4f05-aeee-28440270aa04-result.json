{"name": "Fill form test", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.all(('css selector', '[id^=react-select][id*=option]')).element_by(has exact text Delhi).click\n\nReason: ElementClickInterceptedException: Message: element click intercepted: Element <div class=\" css-1n7v3ny-option\" id=\"react-select-4-option-0\" tabindex=\"-1\">...</div> is not clickable at point (1180, 846). Other element would receive the click: <div>...</div>\n  (Session info: chrome=99.0.4844.51)\nStacktrace:\n#0 0x5605c66467d3 <unknown>\n#1 0x5605c63a2688 <unknown>\n#2 0x5605c63e0298 <unknown>\n#3 0x5605c63ddd47 <unknown>\n#4 0x5605c63db4b4 <unknown>\n#5 0x5605c63da23c <unknown>\n#6 0x5605c63cda19 <unknown>\n#7 0x5605c63f66b2 <unknown>\n#8 0x5605c63cd2c3 <unknown>\n#9 0x5605c63f67be <unknown>\n#10 0x5605c6409a0c <unknown>\n#11 0x5605c63f65a3 <unknown>\n#12 0x5605c63cbddc <unknown>\n#13 0x5605c63ccde5 <unknown>\n#14 0x5605c667749d <unknown>\n#15 0x5605c669060c <unknown>\n#16 0x5605c6679205 <unknown>\n#17 0x5605c6690ee5 <unknown>\n#18 0x5605c666d070 <unknown>\n#19 0x5605c66ac488 <unknown>\n#20 0x5605c66ac60c <unknown>\n#21 0x5605c66c5c6d <unknown>\n#22 0x7fa8b4cb4609 <unknown>\n\nScreenshot: file://C:\\Users\\ПК\\.selene\\screenshots\\1675062214112\\1675062214113.png\nPageSource: file://C:\\Users\\ПК\\.selene\\screenshots\\1675062214112\\1675062214113.html", "trace": "fn = <selene.core.wait.Command object at 0x0000023F0347C750>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\..\\..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Command object at 0x0000023F0347C750>\nentity = <selene.core.entity.Element object at 0x0000023F05F8EF10>\n\n    def __call__(self, entity: T) -> R:\n>       return self._fn(entity)\n\n..\\..\\..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x0000023F05F8EF10>\n\n>       else Command('click', lambda element: element().click())\n    )\n\n..\\..\\..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:528: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"f4968b1f327b309df589191796d71e65\", element=\"3cd5b6d8-d1cb-431f-934c-764ac805c0d4\")>\n\n    def click(self) -> None:\n        \"\"\"Clicks the element.\"\"\"\n>       self._execute(Command.CLICK_ELEMENT)\n\n..\\..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"f4968b1f327b309df589191796d71e65\", element=\"3cd5b6d8-d1cb-431f-934c-764ac805c0d4\")>\ncommand = 'clickElement'\nparams = {'id': '3cd5b6d8-d1cb-431f-934c-764ac805c0d4', 'sessionId': 'f4968b1f327b309df589191796d71e65'}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params['id'] = self._id\n>       return self._parent.execute(command, params)\n\n..\\..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:396: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"f4968b1f327b309df589191796d71e65\")>\ndriver_command = 'clickElement'\nparams = {'id': '3cd5b6d8-d1cb-431f-934c-764ac805c0d4'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023F05BC56D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x5605c66ac60c \\\\u003Cunknown>\\\\n#21 0x5605c66c5c6d \\\\u003Cunknown>\\\\n#22 0x7fa8b4cb4609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\" css-1n7v3ny-option\" id=\"react-select-4-option-0\" tabindex=\"-1\">...</div> is not clickable at point (1180, 846). Other element would receive the click: <div>...</div>\nE         (Session info: chrome=99.0.4844.51)\nE       Stacktrace:\nE       #0 0x5605c66467d3 <unknown>\nE       #1 0x5605c63a2688 <unknown>\nE       #2 0x5605c63e0298 <unknown>\nE       #3 0x5605c63ddd47 <unknown>\nE       #4 0x5605c63db4b4 <unknown>\nE       #5 0x5605c63da23c <unknown>\nE       #6 0x5605c63cda19 <unknown>\nE       #7 0x5605c63f66b2 <unknown>\nE       #8 0x5605c63cd2c3 <unknown>\nE       #9 0x5605c63f67be <unknown>\nE       #10 0x5605c6409a0c <unknown>\nE       #11 0x5605c63f65a3 <unknown>\nE       #12 0x5605c63cbddc <unknown>\nE       #13 0x5605c63ccde5 <unknown>\nE       #14 0x5605c667749d <unknown>\nE       #15 0x5605c669060c <unknown>\nE       #16 0x5605c6679205 <unknown>\nE       #17 0x5605c6690ee5 <unknown>\nE       #18 0x5605c666d070 <unknown>\nE       #19 0x5605c66ac488 <unknown>\nE       #20 0x5605c66ac60c <unknown>\nE       #21 0x5605c66c5c6d <unknown>\nE       #22 0x7fa8b4cb4609 <unknown>\n\n..\\..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.title('Fill form test')\n    def test_final():\n        ilja = User(\n            name='Andrew',\n            last_name='Domnin',\n            email='domniniv@mail.ru',\n            gender='Male',\n            phone='8905101010',\n            adress='Sad area, Dreary area, Sadness, Disappointment Avenue, house 13',\n            birthday=[5, 2, 1987],\n            subjects='Maths',\n            hobbies='Reading',\n            photo='foto.bmp',\n            state='NCR',\n            sity='Delhi'\n        )\n        with allure.step('Fill'):\n>           practice_form.fill(ilja)\n\ntest_final.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\practice_form.py:23: in fill\n    action.select_sity(user.sity)\n..\\actions\\action.py:35: in select_sity\n    select_option('#city', text)\n..\\actions\\action.py:27: in select_option\n    ).click()\n..\\..\\..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:525: in click\n    self.wait.for_(\n..\\..\\..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:147: in for_\n    return _(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x0000023F0347C750>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n    \n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.all(('css selector', '[id^=react-select][id*=option]')).element_by(has exact text Delhi).click\nE                   \nE                   Reason: ElementClickInterceptedException: Message: element click intercepted: Element <div class=\" css-1n7v3ny-option\" id=\"react-select-4-option-0\" tabindex=\"-1\">...</div> is not clickable at point (1180, 846). Other element would receive the click: <div>...</div>\nE                     (Session info: chrome=99.0.4844.51)\nE                   Stacktrace:\nE                   #0 0x5605c66467d3 <unknown>\nE                   #1 0x5605c63a2688 <unknown>\nE                   #2 0x5605c63e0298 <unknown>\nE                   #3 0x5605c63ddd47 <unknown>\nE                   #4 0x5605c63db4b4 <unknown>\nE                   #5 0x5605c63da23c <unknown>\nE                   #6 0x5605c63cda19 <unknown>\nE                   #7 0x5605c63f66b2 <unknown>\nE                   #8 0x5605c63cd2c3 <unknown>\nE                   #9 0x5605c63f67be <unknown>\nE                   #10 0x5605c6409a0c <unknown>\nE                   #11 0x5605c63f65a3 <unknown>\nE                   #12 0x5605c63cbddc <unknown>\nE                   #13 0x5605c63ccde5 <unknown>\nE                   #14 0x5605c667749d <unknown>\nE                   #15 0x5605c669060c <unknown>\nE                   #16 0x5605c6679205 <unknown>\nE                   #17 0x5605c6690ee5 <unknown>\nE                   #18 0x5605c666d070 <unknown>\nE                   #19 0x5605c66ac488 <unknown>\nE                   #20 0x5605c66ac60c <unknown>\nE                   #21 0x5605c66c5c6d <unknown>\nE                   #22 0x7fa8b4cb4609 <unknown>\nE                   \nE                   Screenshot: file://C:\\Users\\ПК\\.selene\\screenshots\\1675062214112\\1675062214113.png\nE                   PageSource: file://C:\\Users\\ПК\\.selene\\screenshots\\1675062214112\\1675062214113.html\n\n..\\..\\..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:145: TimeoutException"}, "steps": [{"name": "Fill", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.all(('css selector', '[id^=react-select][id*=option]')).element_by(has exact text Delhi).click\n\nReason: ElementClickInterceptedException: Message: element click intercepted: Element <div class=\" css-1n7v3ny-option\" id=\"react-select-4-option-0\" tabindex=\"-1\">...</div> is not clickable at point (1180, 846). Other element would receive the click: <div>...</div>\n  (Session info: chrome=99.0.4844.51)\nStacktrace:\n#0 0x5605c66467d3 <unknown>\n#1 0x5605c63a2688 <unknown>\n#2 0x5605c63e0298 <unknown>\n#3 0x5605c63ddd47 <unknown>\n#4 0x5605c63db4b4 <unknown>\n#5 0x5605c63da23c <unknown>\n#6 0x5605c63cda19 <unknown>\n#7 0x5605c63f66b2 <unknown>\n#8 0x5605c63cd2c3 <unknown>\n#9 0x5605c63f67be <unknown>\n#10 0x5605c6409a0c <unknown>\n#11 0x5605c63f65a3 <unknown>\n#12 0x5605c63cbddc <unknown>\n#13 0x5605c63ccde5 <unknown>\n#14 0x5605c667749d <unknown>\n#15 0x5605c669060c <unknown>\n#16 0x5605c6679205 <unknown>\n#17 0x5605c6690ee5 <unknown>\n#18 0x5605c666d070 <unknown>\n#19 0x5605c66ac488 <unknown>\n#20 0x5605c66ac60c <unknown>\n#21 0x5605c66c5c6d <unknown>\n#22 0x7fa8b4cb4609 <unknown>\n\nScreenshot: file://C:\\Users\\ПК\\.selene\\screenshots\\1675062214112\\1675062214113.png\nPageSource: file://C:\\Users\\ПК\\.selene\\screenshots\\1675062214112\\1675062214113.html\n\n", "trace": "  File \"C:\\Users\\ПК\\PycharmProjects\\qa_guru_9\\tests\\test_final.py\", line 23, in test_final\n    practice_form.fill(ilja)\n  File \"C:\\Users\\ПК\\PycharmProjects\\qa_guru_9\\pages\\practice_form.py\", line 23, in fill\n    action.select_sity(user.sity)\n  File \"C:\\Users\\ПК\\PycharmProjects\\qa_guru_9\\actions\\action.py\", line 35, in select_sity\n    select_option('#city', text)\n  File \"C:\\Users\\ПК\\PycharmProjects\\qa_guru_9\\actions\\action.py\", line 27, in select_option\n    ).click()\n      ^^^^^^^\n  File \"C:\\Users\\ПК\\venv\\Lib\\site-packages\\selene\\core\\entity.py\", line 525, in click\n    self.wait.for_(\n  File \"C:\\Users\\ПК\\venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 147, in for_\n    return _(fn)\n           ^^^^^\n  File \"C:\\Users\\ПК\\venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 145, in _\n    raise self._hook_failure(failure)\n"}, "start": 1675062220869, "stop": 1675062233698}], "start": 1675062220869, "stop": 1675062233700, "uuid": "599b8e90-d7dd-49c8-8952-f7ad5e9331c5", "historyId": "5e3fa557aacd97077edb97ee13b14168", "testCaseId": "d24ed29fa26cbf9369b37b0910083b5b", "fullName": "test_final#test_final", "labels": [{"name": "suite", "value": "test_final"}, {"name": "host", "value": "DESKTOP-SCFCSO1"}, {"name": "thread", "value": "18512-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_final"}]}